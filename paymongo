Your profile was shared to us by Collabera Digital and we wanted to move forward with the next steps, which would be a technical assessment. Please see below instructions: 

— start exam
OO Parking Lot
You were hired by Ayala Corp. to implement a parking allocation system for their new malling complex, the Object-Oriented Mall. The new parking system will pre-assign a slot for every vehicle coming into the complex. No vehicle can freely choose a parking slot and no vehicle is reserved or assigned a slot until they arrive at the entry point of the complex. The system must auto-assign a parking slot that satisfies the following constraints:

1. There are initially three (3) entry points, and there can be no less than three (3) leading into the parking complex. A vehicle must be assigned a possible and available slot closest to the parking entrance. The mall can decide to add new entrances later.

2. There are three types of vehicles: small (S), medium (M), and large (L), and there are three types of parking slots: small (SP), medium (MP), and large (LP).
(a) S vehicles can park in SP, MP, and LP parking spaces;
(b) M vehicles can park in MP and LP parking spaces; and
(c) L vehicles can park only in LP parking spaces.

3. Your parking system must also handle the calculation of fees, and must meet the following pricing structure:
(a) All types of cars pay the flat rate of 40 pesos for the first three (3) hours;
(b) The exceeding hourly rate beyond the initial three (3) hours will be charged as follows:
20/hour for vehicles parked in SP;
60/hour for vehicles parked in MP; and
100/hour for vehicles parked in LP
Take note that exceeding hours are charged depending on parking slot size regardless of vehicle size.

For parking that exceeds 24 hours, every full 24-hour chunk is charged 5,000 pesos regardless of the parking slot.

The remainder hours are charged using the method explained in (b).

Parking fees are calculated using the rounding up method, e.g. 6.4 hours must be rounded to 7.

(c) A vehicle leaving the parking complex and returning within one hour based on their exit time must be charged a continuous rate, i.e. the vehicle must be considered as if it did not leave. Otherwise, rates must be implemented as described. For example, if a vehicle exits at 10:00 and returns at 10:30, the continuous rate must apply.

You are free to design the system in any pattern you wish. However, take note that the system assumes the input of the following:

(a) The number of entry points to the parking complex, but no less than three (3). Assume that the entry points are also exit points, so no need to take into account the number of possible exit points.

(b) The map of the parking slot. You are welcome to introduce a design that suits your approach. One suggested method, however, is to accept a list of tuples corresponding to the distance of each slot from every entry point. For example, if your parking system has three (3) entry points. The list of parking spaces may be the following: [(1,4,5), (3,2,3), ...], where the integer entry per tuple corresponds to the distance unit from every parking entry point (A, B, C).

(c) The sizes of every corresponding parking slot. Again, you are welcome to introduce your design. We suggest using a list of corresponding sizes described in integers: [0, 2, 1, 1, ...] where 0, 1, 2 means small, medium, and large in that order. Another useful design may be a dictionary of parking sizes with corresponding slots as values.

(d) Two functions to park a vehicle and unpark it. The functions must consider the attributes of the vehicle as described above. When the unpark function is called, it must also return how much the vehicle concerned is charged.

— end exam

Please implement your output using NodeJS or Python. While creating a web app is optional, if you choose to do so, please use ReactJS. It doesn’t have to be a full-stack solution, and a database implementation is not a strict requirement. That said, we’re not stopping you from doing so either! Create something that showcases your programming and problem-solving skills. Your experience level will be taken into consideration during the evaluation.

We'll give you until Friday, February 23, at 8:00 am to complete and submit your source code via GitHub (commit as if this were a real product feature). Create a README explaining how to set up and run your app. Please make your repository private and provide the invite link to access your code. If you finish earlier, you can send it in advance. Once your source code passes the initial review, we will send you an interview invitation to present your work.

The interview will consist of two parts. The first part is the presentation, where you'll demo the different scenarios stated above and explain your code, technical choices, tradeoffs, any assumptions you made, and the approach you implemented. If you left things aside due to time constraints, explain why and how you would resolve or improve them. The second part will focus on getting to know you and your work experiences.

Please read the exam carefully, and if you have any doubts or need additional information, don't hesitate to ask us before starting. I've copied Rhiza, our Head of Software Engineering here at PayMongo, to assist with any questions you may have.

When replying, please include ALL emails for everyone's visibility. Also, please acknowledge/reply to this email thread upon receipt. Thank you!

Regards,
--